// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hand_num_nn,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.451000,HLS_SYN_LAT=6949,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=34,HLS_SYN_FF=7065,HLS_SYN_LUT=10059}" *)

module hand_num_nn (
        ap_clk,
        ap_rst_n,
        X_Addr_A,
        X_EN_A,
        X_WEN_A,
        X_Din_A,
        X_Dout_A,
        X_Clk_A,
        X_Rst_A,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 113'd1;
parameter    ap_ST_fsm_state2 = 113'd2;
parameter    ap_ST_fsm_state3 = 113'd4;
parameter    ap_ST_fsm_state4 = 113'd8;
parameter    ap_ST_fsm_state5 = 113'd16;
parameter    ap_ST_fsm_state6 = 113'd32;
parameter    ap_ST_fsm_state7 = 113'd64;
parameter    ap_ST_fsm_state8 = 113'd128;
parameter    ap_ST_fsm_state9 = 113'd256;
parameter    ap_ST_fsm_state10 = 113'd512;
parameter    ap_ST_fsm_state11 = 113'd1024;
parameter    ap_ST_fsm_state12 = 113'd2048;
parameter    ap_ST_fsm_state13 = 113'd4096;
parameter    ap_ST_fsm_state14 = 113'd8192;
parameter    ap_ST_fsm_state15 = 113'd16384;
parameter    ap_ST_fsm_state16 = 113'd32768;
parameter    ap_ST_fsm_state17 = 113'd65536;
parameter    ap_ST_fsm_state18 = 113'd131072;
parameter    ap_ST_fsm_state19 = 113'd262144;
parameter    ap_ST_fsm_state20 = 113'd524288;
parameter    ap_ST_fsm_state21 = 113'd1048576;
parameter    ap_ST_fsm_state22 = 113'd2097152;
parameter    ap_ST_fsm_state23 = 113'd4194304;
parameter    ap_ST_fsm_state24 = 113'd8388608;
parameter    ap_ST_fsm_state25 = 113'd16777216;
parameter    ap_ST_fsm_state26 = 113'd33554432;
parameter    ap_ST_fsm_state27 = 113'd67108864;
parameter    ap_ST_fsm_state28 = 113'd134217728;
parameter    ap_ST_fsm_state29 = 113'd268435456;
parameter    ap_ST_fsm_state30 = 113'd536870912;
parameter    ap_ST_fsm_state31 = 113'd1073741824;
parameter    ap_ST_fsm_state32 = 113'd2147483648;
parameter    ap_ST_fsm_state33 = 113'd4294967296;
parameter    ap_ST_fsm_state34 = 113'd8589934592;
parameter    ap_ST_fsm_state35 = 113'd17179869184;
parameter    ap_ST_fsm_state36 = 113'd34359738368;
parameter    ap_ST_fsm_state37 = 113'd68719476736;
parameter    ap_ST_fsm_state38 = 113'd137438953472;
parameter    ap_ST_fsm_state39 = 113'd274877906944;
parameter    ap_ST_fsm_state40 = 113'd549755813888;
parameter    ap_ST_fsm_state41 = 113'd1099511627776;
parameter    ap_ST_fsm_state42 = 113'd2199023255552;
parameter    ap_ST_fsm_state43 = 113'd4398046511104;
parameter    ap_ST_fsm_state44 = 113'd8796093022208;
parameter    ap_ST_fsm_state45 = 113'd17592186044416;
parameter    ap_ST_fsm_state46 = 113'd35184372088832;
parameter    ap_ST_fsm_state47 = 113'd70368744177664;
parameter    ap_ST_fsm_state48 = 113'd140737488355328;
parameter    ap_ST_fsm_state49 = 113'd281474976710656;
parameter    ap_ST_fsm_state50 = 113'd562949953421312;
parameter    ap_ST_fsm_state51 = 113'd1125899906842624;
parameter    ap_ST_fsm_state52 = 113'd2251799813685248;
parameter    ap_ST_fsm_state53 = 113'd4503599627370496;
parameter    ap_ST_fsm_state54 = 113'd9007199254740992;
parameter    ap_ST_fsm_state55 = 113'd18014398509481984;
parameter    ap_ST_fsm_state56 = 113'd36028797018963968;
parameter    ap_ST_fsm_state57 = 113'd72057594037927936;
parameter    ap_ST_fsm_state58 = 113'd144115188075855872;
parameter    ap_ST_fsm_state59 = 113'd288230376151711744;
parameter    ap_ST_fsm_state60 = 113'd576460752303423488;
parameter    ap_ST_fsm_state61 = 113'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 113'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 113'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 113'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 113'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 113'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 113'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 113'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 113'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 113'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 113'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 113'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 113'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 113'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 113'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 113'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 113'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 113'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 113'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 113'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 113'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 113'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 113'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 113'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 113'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 113'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 113'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 113'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 113'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 113'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 113'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 113'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 113'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 113'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 113'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 113'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 113'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 113'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 113'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 113'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 113'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 113'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 113'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 113'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 113'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 113'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 113'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 113'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 113'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 113'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 113'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 113'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 113'd5192296858534827628530496329220096;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] X_Addr_A;
output   X_EN_A;
output  [3:0] X_WEN_A;
output  [31:0] X_Din_A;
input  [31:0] X_Dout_A;
output   X_Clk_A;
output   X_Rst_A;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1:0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;

reg X_EN_A;
reg X_Rst_A;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [112:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] y;
wire   [6:0] theta1h1_address0;
reg    theta1h1_ce0;
wire   [31:0] theta1h1_q0;
wire   [3:0] theta1b2_address0;
reg    theta1b2_ce0;
wire   [31:0] theta1b2_q0;
wire   [8:0] theta2h3_address0;
reg    theta2h3_ce0;
wire   [31:0] theta2h3_q0;
wire   [4:0] theta2b4_address0;
reg    theta2b4_ce0;
wire   [31:0] theta2b4_q0;
wire   [4:0] theta3h5_address0;
reg    theta3h5_ce0;
wire   [31:0] theta3h5_q0;
wire   [31:0] grp_fu_306_p2;
reg   [31:0] reg_338;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state47;
wire   [31:0] grp_fu_297_p2;
reg   [31:0] reg_343;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state56;
reg   [31:0] reg_349;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state52;
wire   [3:0] i_3_fu_361_p2;
reg   [3:0] i_3_reg_639;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_fu_367_p1;
reg   [63:0] tmp_reg_644;
wire   [0:0] exitcond4_fu_355_p2;
wire   [7:0] tmp_cast_fu_372_p1;
reg   [7:0] tmp_cast_reg_649;
reg   [3:0] h1_addr_reg_654;
wire   [2:0] j_2_fu_382_p2;
reg   [2:0] j_2_reg_662;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond3_fu_376_p2;
wire    ap_CS_fsm_state4;
reg   [31:0] theta1h1_load_reg_682;
wire    ap_CS_fsm_state5;
reg   [31:0] theta1b2_load_reg_692;
wire    ap_CS_fsm_state14;
wire   [0:0] grp_fu_318_p2;
reg   [0:0] tmp_21_reg_697;
wire    ap_CS_fsm_state20;
wire   [4:0] i_5_fu_481_p2;
reg   [4:0] i_5_reg_705;
wire    ap_CS_fsm_state22;
wire   [63:0] tmp_2_fu_487_p1;
reg   [63:0] tmp_2_reg_710;
wire   [0:0] exitcond2_fu_475_p2;
wire   [9:0] tmp_2_cast_fu_492_p1;
reg   [9:0] tmp_2_cast_reg_715;
reg   [4:0] h2_addr_reg_720;
wire   [3:0] j_3_fu_502_p2;
reg   [3:0] j_3_reg_728;
wire    ap_CS_fsm_state23;
wire   [0:0] exitcond1_fu_496_p2;
wire    ap_CS_fsm_state24;
reg   [31:0] theta2h3_load_reg_748;
wire   [31:0] h1_q0;
wire    ap_CS_fsm_state25;
reg   [31:0] theta2b4_load_reg_758;
wire    ap_CS_fsm_state34;
reg   [0:0] tmp_26_reg_763;
wire    ap_CS_fsm_state40;
wire   [4:0] i_4_fu_609_p2;
reg   [4:0] i_4_reg_771;
wire    ap_CS_fsm_state42;
wire   [0:0] exitcond_fu_603_p2;
wire   [31:0] h2_q0;
reg   [31:0] h2_load_reg_786;
wire    ap_CS_fsm_state43;
reg   [31:0] theta3h5_load_reg_791;
wire   [63:0] tmp_8_fu_315_p1;
reg   [63:0] tmp_8_reg_796;
wire    ap_CS_fsm_state57;
wire   [63:0] grp_fu_333_p2;
reg   [63:0] tmp_10_reg_801;
wire    ap_CS_fsm_state75;
wire   [63:0] grp_fu_323_p2;
reg   [63:0] tmp_11_reg_806;
wire    ap_CS_fsm_state81;
wire   [63:0] grp_fu_328_p2;
reg   [63:0] tmp_12_reg_811;
wire    ap_CS_fsm_state112;
reg   [3:0] h1_address0;
reg    h1_ce0;
reg    h1_we0;
wire   [31:0] h1_d0;
reg   [4:0] h2_address0;
reg    h2_ce0;
reg    h2_we0;
wire   [31:0] h2_d0;
reg   [3:0] i_reg_204;
wire    ap_CS_fsm_state21;
reg   [31:0] tmp_1_reg_215;
reg   [2:0] j_reg_227;
reg   [4:0] i_1_reg_239;
wire    ap_CS_fsm_state41;
reg   [31:0] tmp_9_reg_250;
reg   [3:0] j_1_reg_262;
wire   [31:0] ap_phi_mux_h3_phi_fu_278_p4;
reg   [31:0] h3_reg_274;
reg   [4:0] i_2_reg_286;
wire  signed [63:0] tmp_30_cast_fu_415_p1;
wire   [63:0] tmp_5_fu_420_p1;
wire  signed [63:0] tmp_34_cast_fu_543_p1;
wire   [63:0] tmp_17_fu_548_p1;
wire   [63:0] tmp_13_fu_615_p1;
wire   [31:0] X_Addr_A_orig;
reg   [31:0] grp_fu_297_p0;
reg   [31:0] grp_fu_297_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state48;
reg   [31:0] grp_fu_306_p0;
reg   [31:0] grp_fu_306_p1;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state113;
wire   [31:0] tmp_8_fu_315_p0;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state58;
wire   [6:0] tmp_24_fu_392_p3;
wire   [7:0] p_shl_cast_fu_400_p1;
wire   [7:0] tmp_5_cast_fu_388_p1;
wire   [7:0] tmp_28_fu_404_p2;
wire   [7:0] tmp_29_fu_410_p2;
wire   [31:0] tmp_3_to_int_fu_425_p1;
wire   [7:0] tmp_4_fu_429_p4;
wire   [22:0] tmp_16_fu_439_p1;
wire   [0:0] notrhs_fu_449_p2;
wire   [0:0] notlhs_fu_443_p2;
wire   [0:0] tmp_20_fu_455_p2;
wire   [0:0] tmp_22_fu_461_p2;
wire   [8:0] tmp_31_fu_508_p3;
wire   [4:0] tmp_32_fu_520_p3;
wire   [9:0] p_shl1_cast_fu_516_p1;
wire   [9:0] p_shl2_cast_fu_528_p1;
wire   [9:0] tmp_33_fu_532_p2;
wire   [9:0] tmp_34_fu_538_p2;
wire   [31:0] tmp_15_to_int_fu_553_p1;
wire   [7:0] tmp_23_fu_557_p4;
wire   [22:0] tmp_30_fu_567_p1;
wire   [0:0] notrhs8_fu_577_p2;
wire   [0:0] notlhs7_fu_571_p2;
wire   [0:0] tmp_25_fu_583_p2;
wire   [0:0] tmp_27_fu_589_p2;
wire   [31:0] tmp_to_int_fu_621_p1;
wire   [31:0] tmp_neg_fu_625_p2;
wire   [31:0] h3_2_fu_312_p1;
reg   [112:0] ap_NS_fsm;
wire   [31:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 113'd1;
end

hand_num_nn_thetabkb #(
    .DataWidth( 32 ),
    .AddressRange( 105 ),
    .AddressWidth( 7 ))
theta1h1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(theta1h1_address0),
    .ce0(theta1h1_ce0),
    .q0(theta1h1_q0)
);

hand_num_nn_thetacud #(
    .DataWidth( 32 ),
    .AddressRange( 15 ),
    .AddressWidth( 4 ))
theta1b2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(theta1b2_address0),
    .ce0(theta1b2_ce0),
    .q0(theta1b2_q0)
);

hand_num_nn_thetadEe #(
    .DataWidth( 32 ),
    .AddressRange( 450 ),
    .AddressWidth( 9 ))
theta2h3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(theta2h3_address0),
    .ce0(theta2h3_ce0),
    .q0(theta2h3_q0)
);

hand_num_nn_thetaeOg #(
    .DataWidth( 32 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
theta2b4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(theta2b4_address0),
    .ce0(theta2b4_ce0),
    .q0(theta2b4_q0)
);

hand_num_nn_thetafYi #(
    .DataWidth( 32 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
theta3h5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(theta3h5_address0),
    .ce0(theta3h5_ce0),
    .q0(theta3h5_q0)
);

hand_num_nn_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
hand_num_nn_CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(h3_2_fu_312_p1),
    .y(y)
);

hand_num_nn_h1 #(
    .DataWidth( 32 ),
    .AddressRange( 15 ),
    .AddressWidth( 4 ))
h1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(h1_address0),
    .ce0(h1_ce0),
    .we0(h1_we0),
    .d0(h1_d0),
    .q0(h1_q0)
);

hand_num_nn_h2 #(
    .DataWidth( 32 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
h2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(h2_address0),
    .ce0(h2_ce0),
    .we0(h2_we0),
    .d0(h2_d0),
    .q0(h2_q0)
);

hand_num_nn_fadd_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hand_num_nn_fadd_g8j_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_297_p0),
    .din1(grp_fu_297_p1),
    .ce(1'b1),
    .dout(grp_fu_297_p2)
);

hand_num_nn_fmul_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
hand_num_nn_fmul_hbi_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_306_p0),
    .din1(grp_fu_306_p1),
    .ce(1'b1),
    .dout(grp_fu_306_p2)
);

hand_num_nn_fptruibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
hand_num_nn_fptruibs_U3(
    .din0(tmp_12_reg_811),
    .dout(h3_2_fu_312_p1)
);

hand_num_nn_fpextjbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
hand_num_nn_fpextjbC_U4(
    .din0(tmp_8_fu_315_p0),
    .dout(tmp_8_fu_315_p1)
);

hand_num_nn_fcmp_kbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
hand_num_nn_fcmp_kbM_U5(
    .din0(reg_349),
    .din1(32'd0),
    .opcode(5'd4),
    .dout(grp_fu_318_p2)
);

hand_num_nn_dadd_lbW #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
hand_num_nn_dadd_lbW_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_10_reg_801),
    .din1(64'd4607182418800017408),
    .ce(1'b1),
    .dout(grp_fu_323_p2)
);

hand_num_nn_ddiv_mb6 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
hand_num_nn_ddiv_mb6_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(64'd4607182418800017408),
    .din1(tmp_11_reg_806),
    .ce(1'b1),
    .dout(grp_fu_328_p2)
);

hand_num_nn_dexp_ncg #(
    .ID( 1 ),
    .NUM_STAGE( 18 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
hand_num_nn_dexp_ncg_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(64'd0),
    .din1(tmp_8_reg_796),
    .ce(1'b1),
    .dout(grp_fu_333_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_475_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        h3_reg_274 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        h3_reg_274 <= grp_fu_297_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_355_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_239 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        i_1_reg_239 <= i_5_reg_705;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_475_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        i_2_reg_286 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        i_2_reg_286 <= i_4_reg_771;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        i_reg_204 <= i_3_reg_639;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_204 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        j_1_reg_262 <= j_3_reg_728;
    end else if (((exitcond2_fu_475_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        j_1_reg_262 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_reg_227 <= j_2_reg_662;
    end else if (((exitcond4_fu_355_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_227 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_1_reg_215 <= grp_fu_297_p2;
    end else if (((exitcond4_fu_355_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_1_reg_215 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        tmp_9_reg_250 <= grp_fu_297_p2;
    end else if (((exitcond2_fu_475_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        tmp_9_reg_250 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_355_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        h1_addr_reg_654 <= tmp_fu_367_p1;
        tmp_cast_reg_649[3 : 0] <= tmp_cast_fu_372_p1[3 : 0];
        tmp_reg_644[3 : 0] <= tmp_fu_367_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_475_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        h2_addr_reg_720 <= tmp_2_fu_487_p1;
        tmp_2_cast_reg_715[4 : 0] <= tmp_2_cast_fu_492_p1[4 : 0];
        tmp_2_reg_710[4 : 0] <= tmp_2_fu_487_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        h2_load_reg_786 <= h2_q0;
        theta3h5_load_reg_791 <= theta3h5_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_3_reg_639 <= i_3_fu_361_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        i_4_reg_771 <= i_4_fu_609_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        i_5_reg_705 <= i_5_fu_481_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_2_reg_662 <= j_2_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        j_3_reg_728 <= j_3_fu_502_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_338 <= grp_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_343 <= grp_fu_297_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state19))) begin
        reg_349 <= grp_fu_297_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        theta1b2_load_reg_692 <= theta1b2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        theta1h1_load_reg_682 <= theta1h1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        theta2b4_load_reg_758 <= theta2b4_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        theta2h3_load_reg_748 <= theta2h3_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        tmp_10_reg_801 <= grp_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        tmp_11_reg_806 <= grp_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state112)) begin
        tmp_12_reg_811 <= grp_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_21_reg_697 <= grp_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        tmp_26_reg_763 <= grp_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        tmp_8_reg_796 <= tmp_8_fu_315_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        X_EN_A = 1'b1;
    end else begin
        X_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_297_p0 = h3_reg_274;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_297_p0 = ap_phi_mux_h3_phi_fu_278_p4;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state29))) begin
        grp_fu_297_p0 = tmp_9_reg_250;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_297_p0 = tmp_1_reg_215;
    end else begin
        grp_fu_297_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_297_p1 = 32'd3200606530;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_297_p1 = theta2b4_load_reg_758;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_297_p1 = theta1b2_load_reg_692;
    end else if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_297_p1 = reg_338;
    end else begin
        grp_fu_297_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_306_p0 = h2_load_reg_786;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_306_p0 = h1_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_306_p0 = X_Dout_A;
    end else begin
        grp_fu_306_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_306_p1 = theta3h5_load_reg_791;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_306_p1 = theta2h3_load_reg_748;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_306_p1 = theta1h1_load_reg_682;
    end else begin
        grp_fu_306_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        h1_address0 = tmp_17_fu_548_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        h1_address0 = h1_addr_reg_654;
    end else begin
        h1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state24))) begin
        h1_ce0 = 1'b1;
    end else begin
        h1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        h1_we0 = 1'b1;
    end else begin
        h1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        h2_address0 = tmp_13_fu_615_p1;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        h2_address0 = h2_addr_reg_720;
    end else begin
        h2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state42))) begin
        h2_ce0 = 1'b1;
    end else begin
        h2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        h2_we0 = 1'b1;
    end else begin
        h2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        theta1b2_ce0 = 1'b1;
    end else begin
        theta1b2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        theta1h1_ce0 = 1'b1;
    end else begin
        theta1h1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        theta2b4_ce0 = 1'b1;
    end else begin
        theta2b4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        theta2h3_ce0 = 1'b1;
    end else begin
        theta2h3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        theta3h5_ce0 = 1'b1;
    end else begin
        theta3h5_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond4_fu_355_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond3_fu_376_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state22 : begin
            if (((exitcond2_fu_475_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((exitcond1_fu_496_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state42 : begin
            if (((exitcond_fu_603_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign X_Addr_A = X_Addr_A_orig << 32'd2;

assign X_Addr_A_orig = tmp_5_fu_420_p1;

assign X_Clk_A = ap_clk;

assign X_Din_A = 32'd0;

always @ (*) begin
    X_Rst_A = ~ap_rst_n;
end

assign X_WEN_A = 4'd0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_phi_mux_h3_phi_fu_278_p4 = h3_reg_274;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_496_p2 = ((j_1_reg_262 == 4'd15) ? 1'b1 : 1'b0);

assign exitcond2_fu_475_p2 = ((i_1_reg_239 == 5'd30) ? 1'b1 : 1'b0);

assign exitcond3_fu_376_p2 = ((j_reg_227 == 3'd7) ? 1'b1 : 1'b0);

assign exitcond4_fu_355_p2 = ((i_reg_204 == 4'd15) ? 1'b1 : 1'b0);

assign exitcond_fu_603_p2 = ((i_2_reg_286 == 5'd30) ? 1'b1 : 1'b0);

assign h1_d0 = ((tmp_22_fu_461_p2[0:0] === 1'b1) ? 32'd0 : reg_349);

assign h2_d0 = ((tmp_27_fu_589_p2[0:0] === 1'b1) ? 32'd0 : reg_349);

assign i_3_fu_361_p2 = (i_reg_204 + 4'd1);

assign i_4_fu_609_p2 = (i_2_reg_286 + 5'd1);

assign i_5_fu_481_p2 = (i_1_reg_239 + 5'd1);

assign j_2_fu_382_p2 = (j_reg_227 + 3'd1);

assign j_3_fu_502_p2 = (j_1_reg_262 + 4'd1);

assign notlhs7_fu_571_p2 = ((tmp_23_fu_557_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_443_p2 = ((tmp_4_fu_429_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs8_fu_577_p2 = ((tmp_30_fu_567_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_449_p2 = ((tmp_16_fu_439_p1 == 23'd0) ? 1'b1 : 1'b0);

assign p_shl1_cast_fu_516_p1 = tmp_31_fu_508_p3;

assign p_shl2_cast_fu_528_p1 = tmp_32_fu_520_p3;

assign p_shl_cast_fu_400_p1 = tmp_24_fu_392_p3;

assign theta1b2_address0 = tmp_reg_644;

assign theta1h1_address0 = tmp_30_cast_fu_415_p1;

assign theta2b4_address0 = tmp_2_reg_710;

assign theta2h3_address0 = tmp_34_cast_fu_543_p1;

assign theta3h5_address0 = tmp_13_fu_615_p1;

assign tmp_13_fu_615_p1 = i_2_reg_286;

assign tmp_15_to_int_fu_553_p1 = reg_349;

assign tmp_16_fu_439_p1 = tmp_3_to_int_fu_425_p1[22:0];

assign tmp_17_fu_548_p1 = j_1_reg_262;

assign tmp_20_fu_455_p2 = (notrhs_fu_449_p2 | notlhs_fu_443_p2);

assign tmp_22_fu_461_p2 = (tmp_21_reg_697 & tmp_20_fu_455_p2);

assign tmp_23_fu_557_p4 = {{tmp_15_to_int_fu_553_p1[30:23]}};

assign tmp_24_fu_392_p3 = {{j_reg_227}, {4'd0}};

assign tmp_25_fu_583_p2 = (notrhs8_fu_577_p2 | notlhs7_fu_571_p2);

assign tmp_27_fu_589_p2 = (tmp_26_reg_763 & tmp_25_fu_583_p2);

assign tmp_28_fu_404_p2 = (p_shl_cast_fu_400_p1 - tmp_5_cast_fu_388_p1);

assign tmp_29_fu_410_p2 = (tmp_28_fu_404_p2 + tmp_cast_reg_649);

assign tmp_2_cast_fu_492_p1 = i_1_reg_239;

assign tmp_2_fu_487_p1 = i_1_reg_239;

assign tmp_30_cast_fu_415_p1 = $signed(tmp_29_fu_410_p2);

assign tmp_30_fu_567_p1 = tmp_15_to_int_fu_553_p1[22:0];

assign tmp_31_fu_508_p3 = {{j_1_reg_262}, {5'd0}};

assign tmp_32_fu_520_p3 = {{j_1_reg_262}, {1'd0}};

assign tmp_33_fu_532_p2 = (p_shl1_cast_fu_516_p1 - p_shl2_cast_fu_528_p1);

assign tmp_34_cast_fu_543_p1 = $signed(tmp_34_fu_538_p2);

assign tmp_34_fu_538_p2 = (tmp_33_fu_532_p2 + tmp_2_cast_reg_715);

assign tmp_3_to_int_fu_425_p1 = reg_349;

assign tmp_4_fu_429_p4 = {{tmp_3_to_int_fu_425_p1[30:23]}};

assign tmp_5_cast_fu_388_p1 = j_reg_227;

assign tmp_5_fu_420_p1 = j_reg_227;

assign tmp_8_fu_315_p0 = tmp_neg_fu_625_p2;

assign tmp_cast_fu_372_p1 = i_reg_204;

assign tmp_fu_367_p1 = i_reg_204;

assign tmp_neg_fu_625_p2 = (tmp_to_int_fu_621_p1 ^ 32'd2147483648);

assign tmp_to_int_fu_621_p1 = reg_343;

always @ (posedge ap_clk) begin
    tmp_reg_644[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_cast_reg_649[7:4] <= 4'b0000;
    tmp_2_reg_710[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    tmp_2_cast_reg_715[9:5] <= 5'b00000;
end

endmodule //hand_num_nn
