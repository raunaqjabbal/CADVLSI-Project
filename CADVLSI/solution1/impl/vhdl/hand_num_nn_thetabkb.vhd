-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity hand_num_nn_thetabkb_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 105
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of hand_num_nn_thetabkb_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110111111001100011111101101", 
    1 => "10111110110100010010100101100000", 
    2 => "00111110010001101111011010001101", 
    3 => "00111111000100111010101111000010", 
    4 => "10111110101011010100100111101000", 
    5 => "10111110101111010001001100000000", 
    6 => "10111110101000110011010100001000", 
    7 => "00111100100100011011000101111001", 
    8 => "10111110101010000000001000001100", 
    9 => "00111100111001010010010010110010", 
    10 => "00111110101111001010000111001001", 
    11 => "10111111000010110100100100001101", 
    12 => "00111110100110110101011101011100", 
    13 => "10111110100001011101100110011001", 
    14 => "10111110000010111100010010000000", 
    15 => "00111111001100100000111100001011", 
    16 => "00111011101100111100011110000011", 
    17 => "10111110100010110111010101100110", 
    18 => "10111111000001011100001101110110", 
    19 => "10111110010110101010000100011001", 
    20 => "00111110100000101100011111001101", 
    21 => "10111101011000111111100111100101", 
    22 => "00111110010010011010111111001001", 
    23 => "10111101111111101001111100100111", 
    24 => "10111111000100000011100010110000", 
    25 => "00111110101110101111011111000100", 
    26 => "00111110100011111110000101010010", 
    27 => "00111110010111101101010001100100", 
    28 => "10111110111011100101010100101101", 
    29 => "00111110110101001010010001010010", 
    30 => "00111110101010110001110110010101", 
    31 => "10111011111011001111000110000101", 
    32 => "10111110011100011101000111000110", 
    33 => "00111110001011001111111100100100", 
    34 => "00111110100111110011100010100001", 
    35 => "00111101010010101001010000100000", 
    36 => "10111100100010011001100110010111", 
    37 => "00111110001011101000010011111001", 
    38 => "10111110101100010111101000001010", 
    39 => "00111110011111010110001010001001", 
    40 => "00111101001001010100000011001100", 
    41 => "00111100111000101010011110000000", 
    42 => "00111110001011010000000111000110", 
    43 => "10111110110010110011011000010010", 
    44 => "10111110110010110101110001001011", 
    45 => "00111110110111011100011101011100", 
    46 => "00111110000001011010011100010100", 
    47 => "10111111000000111101001110111000", 
    48 => "00111110010001010001101101000001", 
    49 => "10111101111000000111100111101110", 
    50 => "10111111000011101001010010010100", 
    51 => "10111110111010001111100100011011", 
    52 => "10111110110111011100000000111011", 
    53 => "10111101111010111101011101101100", 
    54 => "00111110100001111001011001000111", 
    55 => "10111110100110011001001111000100", 
    56 => "10111110110100011101010001001011", 
    57 => "00111110011100111011001001011100", 
    58 => "10111110111010001110011111001111", 
    59 => "10111110100100010001011100110011", 
    60 => "00111111001010001111100111101011", 
    61 => "10111110010011100110110101001110", 
    62 => "00111110011011110100001100011001", 
    63 => "10111111001010011010111100001100", 
    64 => "10111101110000110100101111011110", 
    65 => "00111110100101100000100111010011", 
    66 => "00111110101010100100000110100100", 
    67 => "00111110011011100000101101001000", 
    68 => "10111011111000010110111000000100", 
    69 => "10111100101110110000100001101010", 
    70 => "00111110011001110011000110011111", 
    71 => "00111110011101110110100101101100", 
    72 => "10111100011001110101001001001010", 
    73 => "10111110101010000101110111110101", 
    74 => "10111110100110100010110000010101", 
    75 => "10111110001111100100110010101100", 
    76 => "10111101001101110011010100111001", 
    77 => "10111110100010000111110000110110", 
    78 => "10111110010001110010110011001010", 
    79 => "00111110101100010101010110100110", 
    80 => "10111110010110111101000111100110", 
    81 => "00111110101000010000000111010011", 
    82 => "00111110010101110011101001101011", 
    83 => "10111110011101010111110011000100", 
    84 => "00111110000000010110110111110010", 
    85 => "10111101110111010111111100010111", 
    86 => "10111110001001000011111110001001", 
    87 => "00111110010011110000001110100111", 
    88 => "10111111000000110111000110111101", 
    89 => "10111110100000010110011111010001", 
    90 => "00111110011101011011001000000100", 
    91 => "10111110101111010101101000011110", 
    92 => "00111100111010110010011100100110", 
    93 => "00111110110011000110111100110000", 
    94 => "00111111000000111111101110010100", 
    95 => "00111110110111001111111101010111", 
    96 => "00111101011101111011110001100101", 
    97 => "00111110001111100100001001100110", 
    98 => "00111100100100001000100011111111", 
    99 => "00111011001001101101001001100111", 
    100 => "10111100001101010011100011011100", 
    101 => "10111110000100011001111000110010", 
    102 => "00111101100001110001001110110100", 
    103 => "00111111000000000100110101111011", 
    104 => "00111101011101011010001101100000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity hand_num_nn_thetabkb is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 105;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of hand_num_nn_thetabkb is
    component hand_num_nn_thetabkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    hand_num_nn_thetabkb_rom_U :  component hand_num_nn_thetabkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


